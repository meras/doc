["src/nvim/eval/executor.c", ["          case '+':", "            f += tv2->vval.v_float; break;", "          case '-':"], "whitespace/newline"]
["src/nvim/eval/executor.c", ["          case '-':", "            f -= tv2->vval.v_float; break;", "          case '*':"], "whitespace/newline"]
["src/nvim/eval/executor.c", ["          case '*':", "            f *= tv2->vval.v_float; break;", "          case '/':"], "whitespace/newline"]
["src/nvim/eval/executor.c", ["          case '/':", "            f /= tv2->vval.v_float; break;", "          }"], "whitespace/newline"]
["src/nvim/eval/executor.c", ["          case '+':", "            n += tv_get_number(tv2); break;", "          case '-':"], "whitespace/newline"]
["src/nvim/eval/executor.c", ["          case '-':", "            n -= tv_get_number(tv2); break;", "          case '*':"], "whitespace/newline"]
["src/nvim/eval/executor.c", ["          case '*':", "            n *= tv_get_number(tv2); break;", "          case '/':"], "whitespace/newline"]
["src/nvim/eval/executor.c", ["          case '/':", "            n = num_divide(n, tv_get_number(tv2)); break;", "          case '%':"], "whitespace/newline"]
["src/nvim/eval/executor.c", ["          case '%':", "            n = num_modulus(n, tv_get_number(tv2)); break;", "          }"], "whitespace/newline"]
["src/nvim/eval/executor.c", ["      const float_T f = (tv2->v_type == VAR_FLOAT", "                           ? tv2->vval.v_float", "                           : (float_T)tv_get_number(tv2));"], "whitespace/alignment"]
["src/nvim/eval/executor.c", ["                           ? tv2->vval.v_float", "                           : (float_T)tv_get_number(tv2));", "      switch (*op) {"], "whitespace/alignment"]
["src/nvim/eval/executor.c", ["      case '+':", "        tv1->vval.v_float += f; break;", "      case '-':"], "whitespace/newline"]
["src/nvim/eval/executor.c", ["      case '-':", "        tv1->vval.v_float -= f; break;", "      case '*':"], "whitespace/newline"]
["src/nvim/eval/executor.c", ["      case '*':", "        tv1->vval.v_float *= f; break;", "      case '/':"], "whitespace/newline"]
["src/nvim/eval/executor.c", ["      case '/':", "        tv1->vval.v_float /= f; break;", "      }"], "whitespace/newline"]

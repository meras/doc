["src/nvim/window.c", ["", "/*", " * split the current window, implements CTRL-W s and :split"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * When \"new_wp\" is NULL: split the current window in two."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "    /*", "     * Check if we are able to split the current window and compute its"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "  /*", "   * allocate new window structure and link it in the window list"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "  /*", "   * Reorganise the tree of frames to insert the new window."], "readability/old_style_comment"]
["src/nvim/window.c", ["    if (flags & WSP_BELOW) {", "      before = FALSE;", "    } else if (flags & WSP_ABOVE) {"], "readability/bool"]
["src/nvim/window.c", ["    } else if (flags & WSP_ABOVE) {", "      before = TRUE;", "    } else if (flags & WSP_VERT) {"], "readability/bool"]
["src/nvim/window.c", ["", "  /*", "   * equalize the window sizes."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Initialize window \"newp\" from window \"oldp\"."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Initialize window \"newp\" from window \"old\"."], "readability/old_style_comment"]
["src/nvim/window.c", ["  newp->w_alist = oldp->w_alist;", "  ++newp->w_alist->al_refcount;", "  newp->w_arg_idx = oldp->w_arg_idx;"], "readability/increment"]
["src/nvim/window.c", ["", "/*", " * Return the number of windows."], "readability/old_style_comment"]
["src/nvim/window.c", ["  FOR_ALL_WINDOWS_IN_TAB(wp, curtab) {", "    ++count;", "  }"], "readability/increment"]
["src/nvim/window.c", ["  // todo is number of windows left to create", "  for (todo = count - 1; todo > 0; --todo) {", "    if (vertical) {"], "readability/increment"]
["src/nvim/window.c", ["", "/*", " * Exchange current and next window"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "  /*", "   * find window to exchange with"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "  /*", "   * 1. remove curwin from the list. Remember after which window it was in wp2"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Move the current window to the very top/bottom/left/right of the screen."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Move window \"win1\" to below/right of \"win2\" and make \"win1\" the current"], "readability/old_style_comment"]
["src/nvim/window.c", ["/// Make all windows the same height.", "///'next_curwin' will soon be the current window, make sure it has enough rows.", "///"], "whitespace/comments"]
["src/nvim/window.c", ["", "      /*", "       * Compute width for \"next_curwin\" window and room available for"], "readability/old_style_comment"]
["src/nvim/window.c", ["      if (has_next_curwin) {", "        --totwincount;                  // don't count curwin", "      }"], "readability/increment"]
["src/nvim/window.c", ["", "      /*", "       * Compute height for \"next_curwin\" window and room available for"], "readability/old_style_comment"]
["src/nvim/window.c", ["      if (has_next_curwin) {", "        --totwincount;                  // don't count curwin", "      }"], "readability/increment"]
["src/nvim/window.c", ["", "  ++RedrawingDisabled;", ""], "readability/increment"]
["src/nvim/window.c", ["", "  --RedrawingDisabled;", ""], "readability/increment"]
["src/nvim/window.c", ["", "  /*", "   * Closing the last window in a tab page.  First go to another tab"], "readability/old_style_comment"]
["src/nvim/window.c", ["  char_u prev_idx[NUMBUFLEN];", "  sprintf((char *)prev_idx, \"%i\", tabpage_index(prev_curtab));", ""], "runtime/printf"]
["src/nvim/window.c", ["", "    /*", "     * Be careful: If autocommands delete the window or cause this window"], "readability/old_style_comment"]
["src/nvim/window.c", ["    if (wp->w_p_pvw || bt_quickfix(wp->w_buffer)) {", "      /*", "       * If the cursor goes to the preview or the quickfix window, try"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "  /*", "   * If last window has a status line now and we don't want one,"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Close window \"win\" in tab page \"tp\", which is not the current tab page."], "readability/old_style_comment"]
["src/nvim/window.c", ["  while (first_tabpage->tp_next != NULL) {", "    tabpage_close(TRUE);", "  }"], "readability/bool"]
["src/nvim/window.c", ["", "  /*", "   * If there is only one window there is nothing to remove."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "  /*", "   * Remove the window from its frame."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Return the tabpage that will be used if the current one is closed."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Find the left-upper window in frame \"frp\"."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Add a status line to windows at the bottom of \"frp\"."], "readability/old_style_comment"]
["src/nvim/window.c", ["      if (wp->w_width > 0) {            // don't make it negative", "        --wp->w_width;", "      }"], "readability/increment"]
["src/nvim/window.c", ["", "/*", " * Set frame width from the window it contains."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Set frame height from the window it contains."], "readability/old_style_comment"]
["src/nvim/window.c", ["      if (p_wmw == 0 && topfrp->fr_win == curwin && next_curwin == NULL) {", "        ++m;", "      }"], "readability/increment"]
["src/nvim/window.c", ["", "/*", " * Allocate the first window and put an empty buffer in it."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Allocate the first window or the first window in a new tab page."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Create a frame for window \"wp\"."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Initialize the window and frame size to the maximum."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Allocate a new tabpage_T and init the values."], "readability/old_style_comment"]
["src/nvim/window.c", ["  init_var_dict(tp->tp_vars, &tp->tp_winvar, VAR_SCOPE);", "  tp->tp_diff_invalid = TRUE;", "  tp->tp_ch_used = p_ch;"], "readability/bool"]
["src/nvim/window.c", ["  diff_clear(tp);", "  for (idx = 0; idx < SNAP_COUNT; ++idx) {", "    clear_snapshot(tp, idx);"], "readability/increment"]
["src/nvim/window.c", ["             && n < after; tp = tp->tp_next) {", "          ++n;", "        }"], "readability/increment"]
["src/nvim/window.c", ["", "/*", " * Open a new tab page if \":tab cmd\" was used.  It will edit the same buffer,"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Create up to \"maxcount\" tabpages with empty windows."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "  /*", "   * Don't execute autocommands while creating the tab pages.  Must do that"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "  for (todo = count - 1; todo > 0; --todo) {", "    if (win_new_tabpage(0, NULL) == FAIL) {"], "readability/increment"]
["src/nvim/window.c", ["", "/*", " * Find tab page \"n\" (first one is 1).  Returns NULL when not found."], "readability/old_style_comment"]
["src/nvim/window.c", ["  for (tp = first_tabpage; tp != NULL && i != n; tp = tp->tp_next) {", "    ++i;", "  }"], "readability/increment"]
["src/nvim/window.c", ["", "/*", " * Get index of tab page \"tp\".  First one has index 1."], "readability/old_style_comment"]
["src/nvim/window.c", ["  for (tp = first_tabpage; tp != NULL && tp != ftp; tp = tp->tp_next) {", "    ++i;", "  }"], "readability/increment"]
["src/nvim/window.c", ["", "/*", " * Go to tab page \"n\".  For \":tab N\" and \"Ngt\"."], "readability/old_style_comment"]
["src/nvim/window.c", ["    ttp = curtab;", "    for (i = n; i < 0; ++i) {", "      for (tp = first_tabpage; tp->tp_next != ttp && tp->tp_next != NULL;"], "readability/increment"]
["src/nvim/window.c", ["", "/*", " * Enter window \"wp\" in tab page \"tp\"."], "readability/old_style_comment"]
["src/nvim/window.c", ["  for (tp = first_tabpage; tp->tp_next != NULL && n < nr; tp = tp->tp_next) {", "    ++n;", "  }"], "readability/increment"]
["src/nvim/window.c", ["", "/*", " * Go to another window."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Find the tabpage for window \"win\"."], "readability/old_style_comment"]
["src/nvim/window.c", ["  while (count--) {", "    /*", "     * First go upwards in the tree of frames until we find an upwards or"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "    /*", "     * Now go downwards to find the bottom or top frame in it."], "readability/old_style_comment"]
["src/nvim/window.c", ["  while (count--) {", "    /*", "     * First go upwards in the tree of frames until we find a left or"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "    /*", "     * Now go downwards to find the leftmost or rightmost frame in it."], "readability/old_style_comment"]
["src/nvim/window.c", ["    prevwin = curwin;           // remember for CTRL-W p", "    curwin->w_redr_status = TRUE;", "  }"], "readability/bool"]
["src/nvim/window.c", ["  block_autocmds();", "  /*", "   * link the window in the window list"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Append window \"wp\" in the window list after window \"after\"."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Append frame \"frp\" in a frame list after frame \"after\"."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Insert frame \"frp\" in a frame list before frame \"before\"."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Remove a frame from a frame list."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Called from win_new_shellsize() after Rows changed."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Called from win_new_shellsize() after Columns changed."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Save the size of all windows in \"gap\"."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Update the position of the windows in frame \"topfrp\", using the width and"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Set current window height and take care of repositioning other windows to"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Set the window height of window \"win\" and take care of repositioning other"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Set the height of a frame to \"height\" and take care that all frames and"], "readability/old_style_comment"]
["src/nvim/window.c", ["  } else {", "    /*", "     * Column of frames: try to change only frames in this column."], "readability/old_style_comment"]
["src/nvim/window.c", ["     */", "    /*", "     * Do this twice:"], "readability/old_style_comment"]
["src/nvim/window.c", ["     */", "    for (run = 1; run <= 2; ++run) {", "      room = 0;"], "readability/increment"]
["src/nvim/window.c", ["                      + frame_minheight(curfrp->fr_parent, NOWIN) - (int)p_wmh - 1);", "      //NOTREACHED", "    }"], "whitespace/comments"]
["src/nvim/window.c", ["", "    /*", "     * Compute the number of lines we will take from others frames (can be"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "    /*", "     * set the current frame to the new height"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "    /*", "     * First take lines from the frames after the current frame.  If"], "readability/old_style_comment"]
["src/nvim/window.c", ["     */", "    for (run = 0; run < 2; ++run) {", "      if (run == 0) {"], "readability/increment"]
["src/nvim/window.c", ["", "/*", " * Set current window width and take care of repositioning other windows to"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Set the width of a frame to \"width\" and take care that all frames and"], "readability/old_style_comment"]
["src/nvim/window.c", ["  } else {", "    /*", "     * Row of frames: try to change only frames in this row."], "readability/old_style_comment"]
["src/nvim/window.c", ["     */", "    for (run = 1; run <= 2; ++run) {", "      room = 0;"], "readability/increment"]
["src/nvim/window.c", ["", "    /*", "     * Compute the number of lines we will take from others frames (can be"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "    /*", "     * set the current frame to the new width"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "    /*", "     * First take lines from the frames right of the current frame.  If"], "readability/old_style_comment"]
["src/nvim/window.c", ["     */", "    for (run = 0; run < 2; ++run) {", "      if (run == 0) {"], "readability/increment"]
["src/nvim/window.c", ["", "  /*", "   * Grow frame fr by \"offset\" lines."], "readability/old_style_comment"]
["src/nvim/window.c", ["  }", "  /*", "   * Now make the other frames smaller."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Separator line of dragwin is dragged \"offset\" lines right (negative is left)."], "readability/old_style_comment"]
["src/nvim/window.c", ["          || wp->w_topline > 1)) {", "    /*", "     * Find a value for w_topline that shows the cursor at the same"], "readability/old_style_comment"]
["src/nvim/window.c", ["    if (sline < 0) {", "      /*", "       * Cursor line would go off top of screen if w_wrow was this high."], "readability/old_style_comment"]
["src/nvim/window.c", ["          line_size = 1;", "          --sline;", "          break;"], "readability/increment"]
["src/nvim/window.c", ["      if (sline < 0) {", "        /*", "         * Line we want at top would go off top of screen.  Use next"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * command_height: called whenever p_ch has been changed"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Resize frame \"frp\" to be \"n\" lines higher (negative for less high)."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Get the file name at the cursor."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Return the file name under or after the cursor."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "  /*", "   * search forward for what could be the start of a file name"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "  /*", "   * Search backward for first char of the file name."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "  /*", "   * Search forward for the last char of the file name."], "readability/old_style_comment"]
["src/nvim/window.c", ["      // Skip over the \"\\\" in \"\\ \".", "      ++len;", "    }"], "readability/increment"]
["src/nvim/window.c", ["", "  /*", "   * If there is trailing punctuation, remove it."], "readability/old_style_comment"]
["src/nvim/window.c", ["      && ptr[len - 2] != '.') {", "    --len;", "  }"], "readability/increment"]
["src/nvim/window.c", ["", "/*", " * A snapshot of the window sizes, to restore them after closing the help"], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Create a snapshot of the current frame sizes."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Remove any existing snapshot."], "readability/old_style_comment"]
["src/nvim/window.c", ["", "/*", " * Copy the size of snapshot frame \"sn\" to frame \"fr\".  Do the same for all"], "readability/old_style_comment"]

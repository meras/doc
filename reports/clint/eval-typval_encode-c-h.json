["src/nvim/eval/typval_encode.c.h", ["                                                      const char *const objname)", "REAL_FATTR_NONNULL_ARG(2, 3, 4, 7) REAL_FATTR_WARN_UNUSED_RESULT", "  REAL_FATTR_ALWAYS_INLINE;"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["static inline int _TYPVAL_ENCODE_CHECK_SELF_REFERENCE(", "                                                      TYPVAL_ENCODE_FIRST_ARG_TYPE TYPVAL_ENCODE_FIRST_ARG_NAME,", "                                                      void *const val, int *const val_copyID,"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                                                      TYPVAL_ENCODE_FIRST_ARG_TYPE TYPVAL_ENCODE_FIRST_ARG_NAME,", "                                                      void *const val, int *const val_copyID,", "                                                      const MPConvStack *const mpstack, const int copyID,"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                                                      void *const val, int *const val_copyID,", "                                                      const MPConvStack *const mpstack, const int copyID,", "                                                      const MPConvStackValType conv_type,"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                                                      const MPConvStack *const mpstack, const int copyID,", "                                                      const MPConvStackValType conv_type,", "                                                      const char *const objname)"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                                                      const MPConvStackValType conv_type,", "                                                      const char *const objname)", "REAL_FATTR_NONNULL_ARG(2, 3, 4, 7) REAL_FATTR_WARN_UNUSED_RESULT"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["static inline int _TYPVAL_ENCODE_CHECK_SELF_REFERENCE(", "                                                     TYPVAL_ENCODE_FIRST_ARG_TYPE TYPVAL_ENCODE_FIRST_ARG_NAME, void *const val, int *const val_copyID,", "                                                     const MPConvStack *const mpstack, const int copyID, const MPConvStackValType conv_type,"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                                                     TYPVAL_ENCODE_FIRST_ARG_TYPE TYPVAL_ENCODE_FIRST_ARG_NAME, void *const val, int *const val_copyID,", "                                                     const MPConvStack *const mpstack, const int copyID, const MPConvStackValType conv_type,", "                                                     const char *const objname)"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                                                     const MPConvStack *const mpstack, const int copyID, const MPConvStackValType conv_type,", "                                                     const char *const objname)", "{"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                                            const char *const objname)", "REAL_FATTR_NONNULL_ARG(2, 4, 6) REAL_FATTR_WARN_UNUSED_RESULT;", ""], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["static int _TYPVAL_ENCODE_CONVERT_ONE_VALUE(", "                                            TYPVAL_ENCODE_FIRST_ARG_TYPE TYPVAL_ENCODE_FIRST_ARG_NAME,", "                                            MPConvStack *const mpstack, MPConvStackVal *const cur_mpsv,"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                                            TYPVAL_ENCODE_FIRST_ARG_TYPE TYPVAL_ENCODE_FIRST_ARG_NAME,", "                                            MPConvStack *const mpstack, MPConvStackVal *const cur_mpsv,", "                                            typval_T *const tv, const int copyID,"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                                            MPConvStack *const mpstack, MPConvStackVal *const cur_mpsv,", "                                            typval_T *const tv, const int copyID,", "                                            const char *const objname)"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                                            typval_T *const tv, const int copyID,", "                                            const char *const objname)", "REAL_FATTR_NONNULL_ARG(2, 4, 6) REAL_FATTR_WARN_UNUSED_RESULT;"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["static int _TYPVAL_ENCODE_CONVERT_ONE_VALUE(", "                                           TYPVAL_ENCODE_FIRST_ARG_TYPE TYPVAL_ENCODE_FIRST_ARG_NAME, MPConvStack *const mpstack,", "                                           MPConvStackVal *const cur_mpsv, typval_T *const tv, const int copyID, const char *const objname)"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                                           TYPVAL_ENCODE_FIRST_ARG_TYPE TYPVAL_ENCODE_FIRST_ARG_NAME, MPConvStack *const mpstack,", "                                           MPConvStackVal *const cur_mpsv, typval_T *const tv, const int copyID, const char *const objname)", "{"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["        },", "      }));", "    break;"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["        },", "      }));", "    TYPVAL_ENCODE_CONV_REAL_LIST_AFTER_START(tv, _mp_last(*mpstack));"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["        const listitem_T *const highest_bits_li = (", "                                                   TV_LIST_ITEM_NEXT(val_list, sign_li));", "        if (TV_LIST_ITEM_TV(highest_bits_li)->v_type != VAR_NUMBER"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["            || ((highest_bits", "                   = TV_LIST_ITEM_TV(highest_bits_li)->vval.v_number)", "                < 0)) {"], "whitespace/alignment"]
["src/nvim/eval/typval_encode.c.h", ["            || ((highest_bits", "                   = TV_LIST_ITEM_TV(highest_bits_li)->vval.v_number)", "                < 0)) {"], "whitespace/alignment"]
["src/nvim/eval/typval_encode.c.h", ["        const listitem_T *const high_bits_li =  (", "                                                 TV_LIST_ITEM_NEXT(val_list, highest_bits_li));", "        if (TV_LIST_ITEM_TV(high_bits_li)->v_type != VAR_NUMBER"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["        _mp_push(*mpstack, ((MPConvStackVal) {", "              .tv = tv,", "              .type = kMPConvList,"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["              .tv = tv,", "              .type = kMPConvList,", "              .saved_copyID = saved_copyID,"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["              .type = kMPConvList,", "              .saved_copyID = saved_copyID,", "              .data = {"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["              .saved_copyID = saved_copyID,", "              .data = {", "                .l = {"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["              },", "            }));", "        break;"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["          TYPVAL_ENCODE_CONV_EMPTY_DICT(  // -V501", "                                          tv, TYPVAL_ENCODE_NODICT_VAR);", "          break;"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["        _mp_push(*mpstack, ((MPConvStackVal) {", "              .tv = tv,", "              .type = kMPConvPairs,"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["              .tv = tv,", "              .type = kMPConvPairs,", "              .saved_copyID = saved_copyID,"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["              .type = kMPConvPairs,", "              .saved_copyID = saved_copyID,", "              .data = {"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["              .saved_copyID = saved_copyID,", "              .data = {", "                .l = {"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["              },", "            }));", "        break;"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["            || ((type", "                   = TV_LIST_ITEM_TV(tv_list_first(val_list))->vval.v_number)", "                > INT8_MAX)"], "whitespace/alignment"]
["src/nvim/eval/typval_encode.c.h", ["            || ((type", "                   = TV_LIST_ITEM_TV(tv_list_first(val_list))->vval.v_number)", "                > INT8_MAX)"], "whitespace/alignment"]
["src/nvim/eval/typval_encode.c.h", ["        if (!(", "              encode_vim_list_to_buf(TV_LIST_ITEM_TV(tv_list_last(val_list))->vval.v_list, &len,", "                                     &buf))) {"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["        },", "      }));", "    TYPVAL_ENCODE_CONV_REAL_DICT_AFTER_START(tv, tv->vval.v_dict,"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                                              typval_T *const tv, const char *const objname)", "REAL_FATTR_NONNULL_ARG(2, 3) REAL_FATTR_WARN_UNUSED_RESULT;", ""], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["TYPVAL_ENCODE_SCOPE int _TYPVAL_ENCODE_ENCODE(", "                                              TYPVAL_ENCODE_FIRST_ARG_TYPE TYPVAL_ENCODE_FIRST_ARG_NAME,", "                                              typval_T *const tv, const char *const objname)"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                                              TYPVAL_ENCODE_FIRST_ARG_TYPE TYPVAL_ENCODE_FIRST_ARG_NAME,", "                                              typval_T *const tv, const char *const objname)", "REAL_FATTR_NONNULL_ARG(2, 3) REAL_FATTR_WARN_UNUSED_RESULT;"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["TYPVAL_ENCODE_SCOPE int _TYPVAL_ENCODE_ENCODE(", "                                             TYPVAL_ENCODE_FIRST_ARG_TYPE TYPVAL_ENCODE_FIRST_ARG_NAME, typval_T *const top_tv,", "                                             const char *const objname)"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                                             TYPVAL_ENCODE_FIRST_ARG_TYPE TYPVAL_ENCODE_FIRST_ARG_NAME, typval_T *const top_tv,", "                                             const char *const objname)", "{"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["      const list_T *const kv_pair = (", "                                     TV_LIST_ITEM_TV(cur_mpsv->data.l.li)->vval.v_list);", "      TYPVAL_ENCODE_SPECIAL_DICT_KEY_CHECK(encode_vim_to__error_ret,"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["              },", "            }));", "        }"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["          _mp_push(mpstack, ((MPConvStackVal) {", "                .type = kMPConvDict,", "                .tv = NULL,"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                .type = kMPConvDict,", "                .tv = NULL,", "                .saved_copyID = saved_copyID,"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                .tv = NULL,", "                .saved_copyID = saved_copyID,", "                .data = {"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                .saved_copyID = saved_copyID,", "                .data = {", "                  .d = {"], "whitespace/indent"]
["src/nvim/eval/typval_encode.c.h", ["                },", "              }));", "          TYPVAL_ENCODE_CONV_REAL_DICT_AFTER_START(NULL, pt->pt_dict,"], "whitespace/indent"]

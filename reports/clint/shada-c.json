["src/nvim/shada.c", ["  kSDReadUndisableableData = (", "                              (1 << kSDItemSearchPattern)", "                              | (1 << kSDItemSubString)"], "whitespace/indent"]
["src/nvim/shada.c", ["                              (1 << kSDItemSearchPattern)", "                              | (1 << kSDItemSubString)", "                              | (1 << kSDItemJump)),  ///< Data reading which cannot be disabled by"], "whitespace/indent"]
["src/nvim/shada.c", ["                              | (1 << kSDItemSubString)", "                              | (1 << kSDItemJump)),  ///< Data reading which cannot be disabled by", "                                                      ///< &shada or other options except for disabling"], "whitespace/indent"]
["src/nvim/shada.c", ["          .value = {", "    .v_type = VAR_UNKNOWN,", "    .vval = { .v_string = NULL }"], "whitespace/indent"]
["src/nvim/shada.c", ["    .v_type = VAR_UNKNOWN,", "    .vval = { .v_string = NULL }", "  },"], "whitespace/indent"]
["src/nvim/shada.c", ["    .vval = { .v_string = NULL }", "  },", "          .additional_elements = NULL),"], "whitespace/indent"]
["src/nvim/shada.c", ["          .sep = (char)(history_type == HIST_SEARCH", "                         ? (char)hist_he.hisstr[STRLEN(hist_he.hisstr) + 1]", "                         : 0),"], "whitespace/alignment"]
["src/nvim/shada.c", ["                         ? (char)hist_he.hisstr[STRLEN(hist_he.hisstr) + 1]", "                         : 0),", "          .additional_elements = hist_he.additional_elements,"], "whitespace/alignment"]
["src/nvim/shada.c", ["  const unsigned srni_flags = (unsigned)(", "                                         (flags & kShaDaWantInfo", "       ? (kSDReadUndisableableData"], "whitespace/indent"]
["src/nvim/shada.c", ["                                         (flags & kShaDaWantInfo", "       ? (kSDReadUndisableableData", "          | kSDReadRegisters"], "whitespace/alignment"]
["src/nvim/shada.c", ["             : 0))", "             : 0)", "                                         | (want_marks && get_shada_parameter('\\'') > 0"], "whitespace/alignment"]
["src/nvim/shada.c", ["             : 0)", "                                         | (want_marks && get_shada_parameter('\\'') > 0", "         ? kSDReadLocalMarks | kSDReadChanges"], "whitespace/indent"]
["src/nvim/shada.c", ["                                         | (want_marks && get_shada_parameter('\\'') > 0", "         ? kSDReadLocalMarks | kSDReadChanges", "         : 0)"], "whitespace/alignment"]
["src/nvim/shada.c", ["         ? kSDReadLocalMarks | kSDReadChanges", "         : 0)", "                                         | (get_old_files"], "whitespace/alignment"]
["src/nvim/shada.c", ["         : 0)", "                                         | (get_old_files", "         ? kSDReadLocalMarks"], "whitespace/indent"]
["src/nvim/shada.c", ["                                         | (get_old_files", "         ? kSDReadLocalMarks", "         : 0));"], "whitespace/alignment"]
["src/nvim/shada.c", ["         ? kSDReadLocalMarks", "         : 0));", "  if (srni_flags == 0) {"], "whitespace/alignment"]
["src/nvim/shada.c", ["                                         (flags & kShaDaWantInfo", "       ? (kSDReadUndisableableData", "          | kSDReadRegisters"], "whitespace/alignment"]
["src/nvim/shada.c", ["             : 0))", "             : 0)", "                                         | (want_marks && get_shada_parameter('\\'') > 0"], "whitespace/alignment"]
["src/nvim/shada.c", ["                                         | (want_marks && get_shada_parameter('\\'') > 0", "         ? kSDReadLocalMarks | kSDReadChanges", "         : 0)"], "whitespace/alignment"]
["src/nvim/shada.c", ["         ? kSDReadLocalMarks | kSDReadChanges", "         : 0)", "                                         | (get_old_files"], "whitespace/alignment"]
["src/nvim/shada.c", ["                                         | (get_old_files", "         ? kSDReadLocalMarks", "         : 0));"], "whitespace/alignment"]
["src/nvim/shada.c", ["         ? kSDReadLocalMarks", "         : 0));", "  if (srni_flags == 0) {"], "whitespace/alignment"]
["src/nvim/shada.c", ["        (cur_entry.data.search_pattern.is_substitute_pattern", "           ? &get_substitute_pattern", "           : &get_search_pattern)(&pat);"], "whitespace/alignment"]
["src/nvim/shada.c", ["           ? &get_substitute_pattern", "           : &get_search_pattern)(&pat);", "        if (pat.pat != NULL && pat.timestamp >= cur_entry.timestamp) {"], "whitespace/alignment"]
["src/nvim/shada.c", ["      (cur_entry.data.search_pattern.is_substitute_pattern", "         ? &set_substitute_pattern", "         : &set_search_pattern)((SearchPattern) {"], "whitespace/alignment"]
["src/nvim/shada.c", ["         ? &set_substitute_pattern", "         : &set_search_pattern)((SearchPattern) {", "        .magic = cur_entry.data.search_pattern.magic,"], "whitespace/alignment"]
["src/nvim/shada.c", ["         : &set_search_pattern)((SearchPattern) {", "        .magic = cur_entry.data.search_pattern.magic,", "        .no_scs = !cur_entry.data.search_pattern.smartcase,"], "whitespace/indent"]
["src/nvim/shada.c", ["        .magic = cur_entry.data.search_pattern.magic,", "        .no_scs = !cur_entry.data.search_pattern.smartcase,", "        .off = {"], "whitespace/indent"]
["src/nvim/shada.c", ["        .no_scs = !cur_entry.data.search_pattern.smartcase,", "        .off = {", "          .dir = cur_entry.data.search_pattern.search_backward ? '?' : '/',"], "whitespace/indent"]
["src/nvim/shada.c", ["        },", "        .pat = (char_u *)cur_entry.data.search_pattern.pat,", "        .additional_data = cur_entry.data.search_pattern.additional_data,"], "whitespace/indent"]
["src/nvim/shada.c", ["        .pat = (char_u *)cur_entry.data.search_pattern.pat,", "        .additional_data = cur_entry.data.search_pattern.additional_data,", "        .timestamp = cur_entry.timestamp,"], "whitespace/indent"]
["src/nvim/shada.c", ["        .additional_data = cur_entry.data.search_pattern.additional_data,", "        .timestamp = cur_entry.timestamp,", "      });"], "whitespace/indent"]
["src/nvim/shada.c", ["        .timestamp = cur_entry.timestamp,", "      });", "      if (cur_entry.data.search_pattern.is_last_used) {"], "whitespace/indent"]
["src/nvim/shada.c", ["         : &set_search_pattern)((SearchPattern) {", "        .magic = cur_entry.data.search_pattern.magic,", "        .no_scs = !cur_entry.data.search_pattern.smartcase,"], "whitespace/indent"]
["src/nvim/shada.c", ["        .magic = cur_entry.data.search_pattern.magic,", "        .no_scs = !cur_entry.data.search_pattern.smartcase,", "        .off = {"], "whitespace/indent"]
["src/nvim/shada.c", ["        .no_scs = !cur_entry.data.search_pattern.smartcase,", "        .off = {", "          .dir = cur_entry.data.search_pattern.search_backward ? '?' : '/',"], "whitespace/indent"]
["src/nvim/shada.c", ["        },", "        .pat = (char_u *)cur_entry.data.search_pattern.pat,", "        .additional_data = cur_entry.data.search_pattern.additional_data,"], "whitespace/indent"]
["src/nvim/shada.c", ["        .pat = (char_u *)cur_entry.data.search_pattern.pat,", "        .additional_data = cur_entry.data.search_pattern.additional_data,", "        .timestamp = cur_entry.timestamp,"], "whitespace/indent"]
["src/nvim/shada.c", ["        .additional_data = cur_entry.data.search_pattern.additional_data,", "        .timestamp = cur_entry.timestamp,", "      });"], "whitespace/indent"]
["src/nvim/shada.c", ["        .timestamp = cur_entry.timestamp,", "      });", "      if (cur_entry.data.search_pattern.is_last_used) {"], "whitespace/indent"]
["src/nvim/shada.c", ["                    (buf == NULL", "                       ? (jl_entry.fname != NULL", "                          && STRCMP(fm.fname, jl_entry.fname) == 0)"], "whitespace/alignment"]
["src/nvim/shada.c", ["                          && STRCMP(fm.fname, jl_entry.fname) == 0)", "                       : fm.fmark.fnum == jl_entry.fmark.fnum),", "                    free_xfmark, SDE_TO_XFMARK, ADJUST_IDX, DUMMY_AFTERFREE);"], "whitespace/alignment"]
["src/nvim/shada.c", ["                    (buf == NULL", "                       ? (jl_entry.fname != NULL", "                          && STRCMP(fm.fname, jl_entry.fname) == 0)"], "whitespace/alignment"]
["src/nvim/shada.c", ["                          && STRCMP(fm.fname, jl_entry.fname) == 0)", "                       : fm.fmark.fnum == jl_entry.fmark.fnum),", "                    free_xfmark, SDE_TO_XFMARK, ADJUST_IDX, DUMMY_AFTERFREE);"], "whitespace/alignment"]
["src/nvim/shada.c", ["    const size_t arr_size = 2 + (size_t)is_hist_search + (size_t)(", "                                                                  tv_list_len(entry.data.", "                                                                              history_item."], "whitespace/indent"]
["src/nvim/shada.c", ["    const size_t arr_size = 2 + (size_t)(", "                                         tv_list_len(entry.data.global_var.additional_elements));", "    msgpack_pack_array(spacker, arr_size);"], "whitespace/indent"]
["src/nvim/shada.c", ["    const size_t arr_size = 1 + (size_t)(", "                                         tv_list_len(entry.data.sub_string.additional_elements));", "    msgpack_pack_array(spacker, arr_size);"], "whitespace/indent"]
["src/nvim/shada.c", ["    const size_t map_size = (size_t)(", "                                     1  // Search pattern is always present", "                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.magic)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     1  // Search pattern is always present", "                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.magic)", "                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.is_last_used)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.magic)", "                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.is_last_used)", "                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.smartcase)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.is_last_used)", "                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.smartcase)", "                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.has_line_offset)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.smartcase)", "                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.has_line_offset)", "                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.place_cursor_at_end)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.has_line_offset)", "                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.place_cursor_at_end)", "                                     + ONE_IF_NOT_DEFAULT(entry,"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.place_cursor_at_end)", "                                     + ONE_IF_NOT_DEFAULT(entry,", "                                                          search_pattern.is_substitute_pattern)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                                          search_pattern.is_substitute_pattern)", "                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.highlighted)", "                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.offset)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.highlighted)", "                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.offset)", "                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.search_backward)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.offset)", "                                     + ONE_IF_NOT_DEFAULT(entry, search_pattern.search_backward)", "                                     // finally, additional data:"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     // finally, additional data:", "                                     + (size_t)(", "                                                entry.data.search_pattern.additional_data"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     + (size_t)(", "                                                entry.data.search_pattern.additional_data", "              ? entry.data.search_pattern.additional_data->dv_hashtab.ht_used"], "whitespace/indent"]
["src/nvim/shada.c", ["                                                entry.data.search_pattern.additional_data", "              ? entry.data.search_pattern.additional_data->dv_hashtab.ht_used", "              : 0));"], "whitespace/indent"]
["src/nvim/shada.c", ["              ? entry.data.search_pattern.additional_data->dv_hashtab.ht_used", "              : 0));", "    msgpack_pack_map(spacker, map_size);"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     + (size_t)(", "                                                entry.data.search_pattern.additional_data", "              ? entry.data.search_pattern.additional_data->dv_hashtab.ht_used"], "whitespace/indent"]
["src/nvim/shada.c", ["                                                entry.data.search_pattern.additional_data", "              ? entry.data.search_pattern.additional_data->dv_hashtab.ht_used", "              : 0));"], "whitespace/indent"]
["src/nvim/shada.c", ["              ? entry.data.search_pattern.additional_data->dv_hashtab.ht_used", "              : 0));", "    msgpack_pack_map(spacker, map_size);"], "whitespace/indent"]
["src/nvim/shada.c", ["    const size_t map_size = (size_t)(", "                                     1  // File name", "                                     + ONE_IF_NOT_DEFAULT(entry, filemark.mark.lnum)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     1  // File name", "                                     + ONE_IF_NOT_DEFAULT(entry, filemark.mark.lnum)", "                                     + ONE_IF_NOT_DEFAULT(entry, filemark.mark.col)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     + ONE_IF_NOT_DEFAULT(entry, filemark.mark.lnum)", "                                     + ONE_IF_NOT_DEFAULT(entry, filemark.mark.col)", "                                     + ONE_IF_NOT_DEFAULT(entry, filemark.name)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     + ONE_IF_NOT_DEFAULT(entry, filemark.mark.col)", "                                     + ONE_IF_NOT_DEFAULT(entry, filemark.name)", "                                     // Additional entries, if any:"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     // Additional entries, if any:", "                                     + (size_t)(", "                                                entry.data.filemark.additional_data == NULL"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     + (size_t)(", "                                                entry.data.filemark.additional_data == NULL", "              ? 0"], "whitespace/indent"]
["src/nvim/shada.c", ["                                                entry.data.filemark.additional_data == NULL", "              ? 0", "              : entry.data.filemark.additional_data->dv_hashtab.ht_used));"], "whitespace/indent"]
["src/nvim/shada.c", ["              ? 0", "              : entry.data.filemark.additional_data->dv_hashtab.ht_used));", "    msgpack_pack_map(spacker, map_size);"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     + (size_t)(", "                                                entry.data.filemark.additional_data == NULL", "              ? 0"], "whitespace/indent"]
["src/nvim/shada.c", ["                                                entry.data.filemark.additional_data == NULL", "              ? 0", "              : entry.data.filemark.additional_data->dv_hashtab.ht_used));"], "whitespace/indent"]
["src/nvim/shada.c", ["              ? 0", "              : entry.data.filemark.additional_data->dv_hashtab.ht_used));", "    msgpack_pack_map(spacker, map_size);"], "whitespace/indent"]
["src/nvim/shada.c", ["    assert(entry.type == kSDItemJump || entry.type == kSDItemChange", "             ? CHECK_DEFAULT(entry, filemark.name)", "             : true);"], "whitespace/alignment"]
["src/nvim/shada.c", ["             ? CHECK_DEFAULT(entry, filemark.name)", "             : true);", "    if (!CHECK_DEFAULT(entry, filemark.name)) {"], "whitespace/alignment"]
["src/nvim/shada.c", ["    const size_t map_size = (size_t)(", "                                     2  // Register contents and name", "                                     + ONE_IF_NOT_DEFAULT(entry, reg.type)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     2  // Register contents and name", "                                     + ONE_IF_NOT_DEFAULT(entry, reg.type)", "                                     + ONE_IF_NOT_DEFAULT(entry, reg.width)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     + ONE_IF_NOT_DEFAULT(entry, reg.type)", "                                     + ONE_IF_NOT_DEFAULT(entry, reg.width)", "                                     + ONE_IF_NOT_DEFAULT(entry, reg.is_unnamed)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     + ONE_IF_NOT_DEFAULT(entry, reg.width)", "                                     + ONE_IF_NOT_DEFAULT(entry, reg.is_unnamed)", "                                     // Additional entries, if any:"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     // Additional entries, if any:", "                                     + (size_t)(entry.data.reg.additional_data == NULL", "                      ? 0"], "whitespace/indent"]
["src/nvim/shada.c", ["                                     + (size_t)(entry.data.reg.additional_data == NULL", "                      ? 0", "                      : entry.data.reg.additional_data->dv_hashtab.ht_used));"], "whitespace/alignment"]
["src/nvim/shada.c", ["                      ? 0", "                      : entry.data.reg.additional_data->dv_hashtab.ht_used));", "    msgpack_pack_map(spacker, map_size);"], "whitespace/alignment"]
["src/nvim/shada.c", ["                                     + (size_t)(entry.data.reg.additional_data == NULL", "                      ? 0", "                      : entry.data.reg.additional_data->dv_hashtab.ht_used));"], "whitespace/alignment"]
["src/nvim/shada.c", ["                      ? 0", "                      : entry.data.reg.additional_data->dv_hashtab.ht_used));", "    msgpack_pack_map(spacker, map_size);"], "whitespace/alignment"]
["src/nvim/shada.c", ["      const size_t map_size = (size_t)(", "                                       1  // Buffer name", "                                       + (size_t)(entry.data.buffer_list.buffers[i].pos.lnum"], "whitespace/indent"]
["src/nvim/shada.c", ["                                       1  // Buffer name", "                                       + (size_t)(entry.data.buffer_list.buffers[i].pos.lnum", "                                                  != default_pos.lnum)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                                  != default_pos.lnum)", "                                       + (size_t)(entry.data.buffer_list.buffers[i].pos.col", "                                                  != default_pos.col)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                       // Additional entries, if any:", "                                       + (size_t)(", "                                                  entry.data.buffer_list.buffers[i].additional_data"], "whitespace/indent"]
["src/nvim/shada.c", ["                                       + (size_t)(", "                                                  entry.data.buffer_list.buffers[i].additional_data", "                                                  == NULL"], "whitespace/indent"]
["src/nvim/shada.c", ["                                                  entry.data.buffer_list.buffers[i].additional_data", "                                                  == NULL", "                ? 0"], "whitespace/indent"]
["src/nvim/shada.c", ["                                                  == NULL", "                ? 0", "                : (entry.data.buffer_list.buffers[i].additional_data"], "whitespace/indent"]
["src/nvim/shada.c", ["                ? 0", "                : (entry.data.buffer_list.buffers[i].additional_data", "                   ->dv_hashtab.ht_used)));"], "whitespace/indent"]
["src/nvim/shada.c", ["                                       + (size_t)(", "                                                  entry.data.buffer_list.buffers[i].additional_data", "                                                  == NULL"], "whitespace/indent"]
["src/nvim/shada.c", ["                                                  entry.data.buffer_list.buffers[i].additional_data", "                                                  == NULL", "                ? 0"], "whitespace/indent"]
["src/nvim/shada.c", ["                                                  == NULL", "                ? 0", "                : (entry.data.buffer_list.buffers[i].additional_data"], "whitespace/indent"]
["src/nvim/shada.c", ["                ? 0", "                : (entry.data.buffer_list.buffers[i].additional_data", "                   ->dv_hashtab.ht_used)));"], "whitespace/indent"]
["src/nvim/shada.c", ["      COMPARE_WITH_ENTRY((entry.data.search_pattern.is_substitute_pattern", "                            ? &wms->sub_search_pattern", "                            : &wms->search_pattern), entry);"], "whitespace/alignment"]
["src/nvim/shada.c", ["                            ? &wms->sub_search_pattern", "                            : &wms->search_pattern), entry);", "      break;"], "whitespace/alignment"]
["src/nvim/shada.c", ["            .place_cursor_at_end = (", "                                    is_substitute_pattern", "                ? defaults.data.search_pattern.place_cursor_at_end"], "whitespace/indent"]
["src/nvim/shada.c", ["  const unsigned srni_flags = (unsigned)(", "                                         kSDReadUndisableableData", "                                         | kSDReadUnknown"], "whitespace/indent"]
["src/nvim/shada.c", ["                                         kSDReadUndisableableData", "                                         | kSDReadUnknown", "                                         | (dump_history ? kSDReadHistory : 0)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                         | kSDReadUnknown", "                                         | (dump_history ? kSDReadHistory : 0)", "                                         | (dump_registers ? kSDReadRegisters : 0)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                         | (dump_history ? kSDReadHistory : 0)", "                                         | (dump_registers ? kSDReadRegisters : 0)", "                                         | (dump_global_vars ? kSDReadVariables : 0)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                         | (dump_registers ? kSDReadRegisters : 0)", "                                         | (dump_global_vars ? kSDReadVariables : 0)", "                                         | (dump_global_marks ? kSDReadGlobalMarks : 0)"], "whitespace/indent"]
["src/nvim/shada.c", ["                                         | (dump_global_vars ? kSDReadVariables : 0)", "                                         | (dump_global_marks ? kSDReadGlobalMarks : 0)", "                                         | (num_marked_files ? kSDReadLocalMarks |"], "whitespace/indent"]
["src/nvim/shada.c", ["                                         | (dump_global_marks ? kSDReadGlobalMarks : 0)", "                                         | (num_marked_files ? kSDReadLocalMarks |", "                                            kSDReadChanges : 0));"], "whitespace/indent"]
["src/nvim/shada.c", ["    strsize = (", "               unpacked.data.via.array.ptr[1].via.bin.size", "               + 1  // Zero byte"], "whitespace/indent"]
["src/nvim/shada.c", ["               unpacked.data.via.array.ptr[1].via.bin.size", "               + 1  // Zero byte", "               + 1);  // Separator character"], "whitespace/indent"]
["src/nvim/shada.c", ["               + 1  // Zero byte", "               + 1);  // Separator character", "    entry->data.history_item.string = xmalloc(strsize);"], "whitespace/indent"]

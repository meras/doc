["src/nvim/menu.c", ["", "/*", " * Code for menus.  Used for the GUI and 'wildmenu'."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "  /*", "   * Check for \"disable\" or \"enable\" argument."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "  /*", "   * If there is no argument, display all menus."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "  /*", "   * If there is only a menu name, display menus with that name."], "readability/old_style_comment"]
["src/nvim/menu.c", ["  } else if (unmenu) {", "    /*", "     * Delete menu(s)."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "    /*", "     * For the PopUp menu, remove a menu for each mode separately."], "readability/old_style_comment"]
["src/nvim/menu.c", ["  } else {", "    /*", "     * Add menu(s)."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "    /*", "     * For the PopUp menu, add a menu for each mode separately."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "      /*", "       * If this menu option was previously only available in other"], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "  /*", "   * Only add system menu items which have not been defined yet."], "readability/old_style_comment"]
["src/nvim/menu.c", ["    // loop over all modes, may add more than one", "    for (i = 0; i < MENU_MODES; ++i) {", "      if (modes & (1 << i)) {"], "readability/increment"]
["src/nvim/menu.c", ["", "/*", " * Set the (sub)menu with the given name to enabled or disabled."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "      /*", "       * When name is empty, we are doing all menu items for the given"], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "      /*", "       * When name is empty, we are removing all menu items for the given"], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "/*", " * Free the given menu structure and remove it from the linked list."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "/*", " * Free the menu->string with the given index."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "/*", " * Used when expanding menu names."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "/*", " * Work out what to complete when doing command line completion of menu names."], "readability/old_style_comment"]
["src/nvim/menu.c", ["  // Check for priority numbers, enable and disable", "  for (p = arg; *p; ++p) {", "    if (!ascii_isdigit(*p) && *p != '.') {"], "readability/increment"]
["src/nvim/menu.c", ["  while (*p != NUL && ascii_iswhite(*p)) {", "    ++p;", "  }"], "readability/increment"]
["src/nvim/menu.c", ["", "  for (; *p && !ascii_iswhite(*p); ++p) {", "    if ((*p == '\\\\' || *p == Ctrl_V) && p[1] != NUL) {"], "readability/increment"]
["src/nvim/menu.c", ["              || ((menu->modes & expand_modes) == 0x0)) {", "            /*", "             * Menu path continues, but we have reached a leaf."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "/*", " * Function given to ExpandGeneric() to obtain the list of (sub)menus (not"], "readability/old_style_comment"]
["src/nvim/menu.c", ["      if (menu->en_dname == NULL) {", "        should_advance = TRUE;", "      }"], "readability/bool"]
["src/nvim/menu.c", ["", "/*", " * Function given to ExpandGeneric() to obtain the list of menus and menu"], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "/*", " * Return TRUE when \"name\" matches with menu \"menu\".  The name is compared in"], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "  for (i = 0; name[i] != NUL && name[i] != TAB; ++i) {", "    if (name[i] != mname[i]) {"], "readability/increment"]
["src/nvim/menu.c", ["", "/*", " * Modify a menu name starting with \"PopUp\" to include the mode character."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "/*", " * Return TRUE if the name is a menu separator identifier: Starts and ends"], "readability/old_style_comment"]
["src/nvim/menu.c", ["    // Activate visual mode", "    VIsual_active = TRUE;", "    VIsual_reselect = TRUE;"], "readability/bool"]
["src/nvim/menu.c", ["    VIsual_active = TRUE;", "    VIsual_reselect = TRUE;", "    check_cursor();"], "readability/bool"]
["src/nvim/menu.c", ["", "/*", " * Translation of menu names.  Just a simple lookup table."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "/*", " * \":menutrans\"."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "  /*", "   * \":menutrans clear\": clear all translations."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "/*", " * Find the character just after one part of a menu name."], "readability/old_style_comment"]
["src/nvim/menu.c", ["    if ((*p == '\\\\' || *p == Ctrl_V) && p[1] != NUL) {", "      ++p;", "    }"], "readability/increment"]
["src/nvim/menu.c", ["    }", "    ++p;", "  }"], "readability/increment"]
["src/nvim/menu.c", ["", "/*", " * Lookup part of a menu name in the translations."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "/*", " * Unescape the name in the translate dictionary table."], "readability/old_style_comment"]
["src/nvim/menu.c", ["", "/*", " * Isolate the menu name."], "readability/old_style_comment"]

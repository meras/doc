["src/nvim/main.c", ["  if (params.edit_type == EDIT_QF) {", "    qf_jump(NULL, 0, 0, FALSE);", "    TIME_MSG(\"jump to first error\");"], "readability/bool"]
["src/nvim/main.c", ["    FOR_ALL_WINDOWS_IN_TAB(wp, curtab) {", "      diff_win_options(wp, TRUE);", "    }"], "readability/bool"]
["src/nvim/main.c", ["    // give the user a chance to read the (error) message", "    no_wait_return = FALSE;", "    wait_return(FALSE);"], "readability/bool"]
["src/nvim/main.c", ["    no_wait_return = FALSE;", "    wait_return(FALSE);", "  }"], "readability/bool"]
["src/nvim/main.c", ["              a = SESSION_FILE;", "              ++argc;", "              --argv;"], "readability/increment"]
["src/nvim/main.c", ["              ++argc;", "              --argv;", "            } else {"], "readability/increment"]
["src/nvim/main.c", ["          } else if ((scriptin[0] =", "                        file_open_new(&error, argv[0], kFileReadOnly|kFileNonBlocking,", "                                      0)) == NULL) {"], "whitespace/alignment"]
["src/nvim/main.c", ["", "/*", " * Many variables are in \"params\" so that we can pass them to invoked"], "readability/old_style_comment"]
["src/nvim/main.c", ["", "/*", " * Decide about window layout for diff mode after reading vimrc."], "readability/old_style_comment"]
["src/nvim/main.c", ["", "/*", " * \"-q errorfile\": Load the error file now."], "readability/old_style_comment"]
["src/nvim/main.c", ["", "/*", " * Need to jump to the tag before executing the '-c command'."], "readability/old_style_comment"]
["src/nvim/main.c", ["", "/*", " * Create the requested number of windows and edit buffers in them."], "readability/old_style_comment"]
["src/nvim/main.c", ["", "  /*", "   * Create the number of windows that was requested."], "readability/old_style_comment"]
["src/nvim/main.c", ["    // Don't execute Win/Buf Enter/Leave autocommands here", "    ++autocmd_no_enter;", "    ++autocmd_no_leave;"], "readability/increment"]
["src/nvim/main.c", ["    ++autocmd_no_enter;", "    ++autocmd_no_leave;", "    dorewind = TRUE;"], "readability/increment"]
["src/nvim/main.c", ["    ++autocmd_no_leave;", "    dorewind = TRUE;", "    while (done++ < 1000) {"], "readability/bool"]
["src/nvim/main.c", ["      }", "      dorewind = FALSE;", "      curbuf = curwin->w_buffer;"], "readability/bool"]
["src/nvim/main.c", ["        swap_exists_action = SEA_DIALOG;", "        set_buflisted(TRUE);", ""], "readability/bool"]
["src/nvim/main.c", ["        // create memfile, read file", "        (void)open_buffer(FALSE, NULL, 0);", ""], "readability/bool"]
["src/nvim/main.c", ["            // abort selected or quit and only one window", "            did_emsg = FALSE;               // avoid hit-enter prompt", "            getout(1);"], "readability/bool"]
["src/nvim/main.c", ["        }", "        dorewind = TRUE;                        // start again", "      }"], "readability/bool"]
["src/nvim/main.c", ["    curbuf = curwin->w_buffer;", "    --autocmd_no_enter;", "    --autocmd_no_leave;"], "readability/increment"]
["src/nvim/main.c", ["    --autocmd_no_enter;", "    --autocmd_no_leave;", "  }"], "readability/increment"]
["src/nvim/main.c", ["", "  /*", "   * Don't execute Win/Buf Enter/Leave autocommands here"], "readability/old_style_comment"]
["src/nvim/main.c", ["   */", "  ++autocmd_no_enter;", "  ++autocmd_no_leave;"], "readability/increment"]
["src/nvim/main.c", ["  ++autocmd_no_enter;", "  ++autocmd_no_leave;", ""], "readability/increment"]
["src/nvim/main.c", ["  arg_idx = 1;", "  for (i = 1; i < parmp->window_count; ++i) {", "    if (cwd != NULL) {"], "readability/increment"]
["src/nvim/main.c", ["          // abort selected and only one window", "          did_emsg = FALSE;             // avoid hit-enter prompt", "          getout(1);"], "readability/bool"]
["src/nvim/main.c", ["  }", "  --autocmd_no_enter;", ""], "readability/increment"]
["src/nvim/main.c", ["", "  --autocmd_no_leave;", "  TIME_MSG(\"editing files in windows\");"], "readability/increment"]
["src/nvim/main.c", ["", "/*", " * Execute the commands from --cmd arguments \"cmds[cnt]\"."], "readability/old_style_comment"]
["src/nvim/main.c", ["", "/*", " * Execute \"+\", \"-c\" and \"-S\" arguments."], "readability/old_style_comment"]
["src/nvim/main.c", ["", "  /*", "   * We start commands on line 0, make \"vim +/pat file\" match a"], "readability/old_style_comment"]
["src/nvim/main.c", ["   */", "  msg_scroll = TRUE;", "  if (parmp->tagname == NULL && curwin->w_cursor.lnum <= 1) {"], "readability/bool"]
["src/nvim/main.c", ["  if (!exmode_active) {", "    msg_scroll = FALSE;", "  }"], "readability/bool"]
["src/nvim/main.c", ["  if (parmp->edit_type == EDIT_QF) {", "    qf_jump(NULL, 0, 0, FALSE);", "  }"], "readability/bool"]
["src/nvim/main.c", ["      // If vimrc file is not owned by user, set 'secure' mode.", "      if (!file_owned(VIMRC_FILE))", "#endif"], "readability/braces"]
["src/nvim/main.c", ["", "/*", " * Check the result of the ATTENTION dialog:"], "readability/old_style_comment"]

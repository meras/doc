["src/nvim/mark.c", ["", "/*", " * mark.c: functions for setting marks and jumping to them"], "readability/old_style_comment"]
["src/nvim/mark.c", ["", "/*", " * This file contains routines to maintain and manipulate marks."], "readability/old_style_comment"]
["src/nvim/mark.c", ["", "/*", " * If a named file mark's lnum is non-zero, it is valid."], "readability/old_style_comment"]
["src/nvim/mark.c", ["#endif", "/*", " * Set named mark \"c\" at current cursor position."], "readability/old_style_comment"]
["src/nvim/mark.c", ["", "/*", " * Set named mark \"c\" to position \"pos\"."], "readability/old_style_comment"]
["src/nvim/mark.c", ["", "/*", " * Set the previous context mark to the current position and add it to the"], "readability/old_style_comment"]
["src/nvim/mark.c", ["", "/*", " * To change context, call setpcmark(), then move the current position to"], "readability/old_style_comment"]
["src/nvim/mark.c", ["", "/*", " * move \"count\" positions in the jump list (count may be negative)"], "readability/old_style_comment"]
["src/nvim/mark.c", ["", "    /*", "     * if first CTRL-O or CTRL-I command after a jump, add cursor position"], "readability/old_style_comment"]
["src/nvim/mark.c", ["      setpcmark();", "      --curwin->w_jumplistidx;          // skip the new entry", "      if (curwin->w_jumplistidx + count < 0) {"], "readability/increment"]
["src/nvim/mark.c", ["      if (buflist_getfile(jmp->fmark.fnum, jmp->fmark.mark.lnum,", "                          0, FALSE) == FAIL) {", "        return (pos_T *)NULL;"], "readability/bool"]
["src/nvim/mark.c", ["", "/*", " * Move \"count\" positions in the changelist (count may be negative)."], "readability/old_style_comment"]
["src/nvim/mark.c", ["", "/*", " * Find mark \"c\" in buffer pointed to by \"buf\"."], "readability/old_style_comment"]
["src/nvim/mark.c", ["    if (findpar(&oa.inclusive,", "                c == '}' ? FORWARD : BACKWARD, 1L, NUL, FALSE)) {", "      pos_copy = curwin->w_cursor;"], "readability/bool"]
["src/nvim/mark.c", ["        if (buflist_getfile(namedfm[c].fmark.fnum,", "                            (linenr_T)1, GETF_SETMARK, FALSE) == OK) {", "          // Set the lnum now, autocommands could have changed it"], "readability/bool"]
["src/nvim/mark.c", ["", "/*", " * For an xtended filemark: set the fnum from the fname."], "readability/old_style_comment"]
["src/nvim/mark.c", ["  if (fm->fname != NULL) {", "    /*", "     * First expand \"~/\" in the file name to the home directory."], "readability/old_style_comment"]
["src/nvim/mark.c", ["#endif", "                                )) {", "      int len;"], "whitespace/parens"]
["src/nvim/mark.c", ["", "/*", " * Check all file marks for a name that matches the file name in buf."], "readability/old_style_comment"]
["src/nvim/mark.c", ["", "  for (i = 0; i < NGLOBALMARKS; ++i) {", "    fmarks_check_one(&namedfm[i], name, buf);"], "readability/increment"]
["src/nvim/mark.c", ["  FOR_ALL_WINDOWS_IN_TAB(wp, curtab) {", "    for (i = 0; i < wp->w_jumplistlen; ++i) {", "      fmarks_check_one(&wp->w_jumplist[i], name, buf);"], "readability/increment"]
["src/nvim/mark.c", ["", "/*", " * Check a if a position from a mark is valid."], "readability/old_style_comment"]
["src/nvim/mark.c", ["", "/*", " * Get name of file from a filemark."], "readability/old_style_comment"]
["src/nvim/mark.c", ["  }", "  return buflist_nr2name(fmark->fnum, FALSE, TRUE);", "}"], "readability/bool"]
["src/nvim/mark.c", ["", "/*", " * Return the line at mark \"mp\".  Truncate to fit in window."], "readability/old_style_comment"]
["src/nvim/mark.c", ["", "/*", " * print the marks"], "readability/old_style_comment"]
["src/nvim/mark.c", ["  show_one_mark('\\'', arg, &curwin->w_pcmark, NULL, true);", "  for (i = 0; i < NMARKS; ++i) {", "    show_one_mark(i + 'a', arg, &curbuf->b_namedm[i].mark, NULL, true);"], "readability/increment"]
["src/nvim/mark.c", ["  }", "  for (i = 0; i < NGLOBALMARKS; ++i) {", "    if (namedfm[i].fmark.fnum != 0) {"], "readability/increment"]
["src/nvim/mark.c", ["", "/*", " * \":delmarks[!] [marks]\""], "readability/old_style_comment"]
["src/nvim/mark.c", ["          if (!(lower ? ASCII_ISLOWER(p[2])", "                      : (digit ? ascii_isdigit(p[2])", "                               : ASCII_ISUPPER(p[2])))"], "whitespace/alignment"]
["src/nvim/mark.c", ["                      : (digit ? ascii_isdigit(p[2])", "                               : ASCII_ISUPPER(p[2])))", "              || to < from) {"], "whitespace/alignment"]
["src/nvim/mark.c", ["                      : (digit ? ascii_isdigit(p[2])", "                               : ASCII_ISUPPER(p[2])))", "              || to < from) {"], "whitespace/alignment"]
["src/nvim/mark.c", ["", "        for (i = from; i <= to; ++i) {", "          if (lower) {"], "readability/increment"]
["src/nvim/mark.c", ["        case '\"':", "          CLEAR_FMARK(&curbuf->b_last_cursor); break;", "        case '^':"], "whitespace/newline"]
["src/nvim/mark.c", ["        case '^':", "          CLEAR_FMARK(&curbuf->b_last_insert); break;", "        case '.':"], "whitespace/newline"]
["src/nvim/mark.c", ["        case '.':", "          CLEAR_FMARK(&curbuf->b_last_change); break;", "        case '[':"], "whitespace/newline"]
["src/nvim/mark.c", ["        case '[':", "          curbuf->b_op_start.lnum    = 0; break;", "        case ']':"], "whitespace/newline"]
["src/nvim/mark.c", ["        case ']':", "          curbuf->b_op_end.lnum      = 0; break;", "        case '<':"], "whitespace/newline"]
["src/nvim/mark.c", ["        case '<':", "          curbuf->b_visual.vi_start.lnum = 0; break;", "        case '>':"], "whitespace/newline"]
["src/nvim/mark.c", ["        case '>':", "          curbuf->b_visual.vi_end.lnum   = 0; break;", "        case ' ':"], "whitespace/newline"]
["src/nvim/mark.c", ["", "/*", " * print the jumplist"], "readability/old_style_comment"]
["src/nvim/mark.c", ["  msg_puts_title(_(\"\\n jump line  col file/text\"));", "  for (i = 0; i < curwin->w_jumplistlen && !got_int; ++i) {", "    if (curwin->w_jumplist[i].fmark.mark.lnum != 0) {"], "readability/increment"]
["src/nvim/mark.c", ["              i > curwin->w_jumplistidx ? i - curwin->w_jumplistidx", "                                        : curwin->w_jumplistidx - i,", "              curwin->w_jumplist[i].fmark.mark.lnum,"], "whitespace/alignment"]
["src/nvim/mark.c", ["      }", "      sprintf((char *)IObuff, \"%c %2d %5ld %4d \",", "              i == curwin->w_jumplistidx ? '>' : ' ',"], "runtime/printf"]
["src/nvim/mark.c", ["", "/*", " * print the changelist"], "readability/old_style_comment"]
["src/nvim/mark.c", ["", "  for (i = 0; i < curbuf->b_changelistlen && !got_int; ++i) {", "    if (curbuf->b_changelist[i].mark.lnum != 0) {"], "readability/increment"]
["src/nvim/mark.c", ["              i > curwin->w_changelistidx ? i - curwin->w_changelistidx", "                                          : curwin->w_changelistidx - i,", "              (long)curbuf->b_changelist[i].mark.lnum,"], "whitespace/alignment"]
["src/nvim/mark.c", ["      }", "      sprintf((char *)IObuff, \"%c %3d %5ld %4d \",", "              i == curwin->w_changelistidx ? '>' : ' ',"], "runtime/printf"]
["src/nvim/mark.c", ["    lp = add; \\", "    if (*lp >= line1 && *lp <= line2) \\", "    { \\"], "readability/braces"]
["src/nvim/mark.c", ["    { \\", "      if (amount == MAXLNUM) \\", "      *lp = 0; \\"], "readability/braces"]
["src/nvim/mark.c", ["      *lp = 0; \\", "      else \\", "      *lp += amount; \\"], "readability/braces"]
["src/nvim/mark.c", ["      *lp = 0; \\", "      else \\", "      *lp += amount; \\"], "whitespace/newline"]
["src/nvim/mark.c", ["    } \\", "    else if (amount_after && *lp > line2) \\", "    *lp += amount_after; \\"], "readability/braces"]
["src/nvim/mark.c", ["    lp = add; \\", "    if (*lp >= line1 && *lp <= line2) \\", "    { \\"], "readability/braces"]
["src/nvim/mark.c", ["    { \\", "      if (amount == MAXLNUM) \\", "      *lp = line1; \\"], "readability/braces"]
["src/nvim/mark.c", ["      *lp = line1; \\", "      else \\", "      *lp += amount; \\"], "readability/braces"]
["src/nvim/mark.c", ["      *lp = line1; \\", "      else \\", "      *lp += amount; \\"], "whitespace/newline"]
["src/nvim/mark.c", ["    } \\", "    else if (amount_after && *lp > line2) \\", "    *lp += amount_after; \\"], "readability/braces"]
["src/nvim/mark.c", ["", "/*", " * Adjust marks between line1 and line2 (inclusive) to move 'amount' lines."], "readability/old_style_comment"]
["src/nvim/mark.c", ["", "  /*", "   * Adjust items in all windows related to the current buffer."], "readability/old_style_comment"]
["src/nvim/mark.c", ["    posp = pp; \\", "    if (posp->lnum == lnum && posp->col >= mincol) \\", "    { \\"], "readability/braces"]
["src/nvim/mark.c", ["", "  /*", "   * Adjust items in all windows related to the current buffer."], "readability/old_style_comment"]
["src/nvim/mark.c", ["    // marks in the jumplist", "    for (i = 0; i < win->w_jumplistlen; ++i) {", "      if (win->w_jumplist[i].fmark.fnum == fnum) {"], "readability/increment"]
["src/nvim/mark.c", ["", "/*", " * Copy the jumplist from window \"from\" to window \"to\"."], "readability/old_style_comment"]
["src/nvim/mark.c", ["", "  for (i = 0; i < from->w_jumplistlen; ++i) {", "    to->w_jumplist[i] = from->w_jumplist[i];"], "readability/increment"]
["src/nvim/mark.c", ["    (iter == NULL", "       ? &(win->w_jumplist[0])", "       : (const xfmark_T *const)iter);"], "whitespace/alignment"]
["src/nvim/mark.c", ["       ? &(win->w_jumplist[0])", "       : (const xfmark_T *const)iter);", "  *fm = *iter_mark;"], "whitespace/alignment"]
["src/nvim/mark.c", ["  *name = (char)(iter_off < NMARKS", "                  ? 'A' + (char)iter_off", "                  : '0' + (char)(iter_off - NMARKS));"], "whitespace/alignment"]
["src/nvim/mark.c", ["                  ? 'A' + (char)iter_off", "                  : '0' + (char)(iter_off - NMARKS));", "  *fm = *iter_mark;"], "whitespace/alignment"]
["src/nvim/mark.c", ["  char mark_name = (char)(iter == NULL", "                           ? NUL", "                           : (iter == &(buf->b_last_cursor)"], "whitespace/alignment"]
["src/nvim/mark.c", ["                           ? NUL", "                           : (iter == &(buf->b_last_cursor)", "                              ? '\"'"], "whitespace/alignment"]
["src/nvim/mark.c", ["", "/*", " * Free items in the jumplist of window \"wp\"."], "readability/old_style_comment"]
["src/nvim/mark.c", ["", "  for (i = 0; i < wp->w_jumplistlen; ++i) {", "    free_xfmark(wp->w_jumplist[i]);"], "readability/increment"]

["src/nvim/eval/decode.c", ["                          ((typval_T){", "        .v_type = VAR_LIST,", "        .v_lock = VAR_UNLOCKED,"], "whitespace/indent"]
["src/nvim/eval/decode.c", ["        .v_type = VAR_LIST,", "        .v_lock = VAR_UNLOCKED,", "        .vval = { .v_list = list },"], "whitespace/indent"]
["src/nvim/eval/decode.c", ["        .v_lock = VAR_UNLOCKED,", "        .vval = { .v_list = list },", "      }));"], "whitespace/indent"]
["src/nvim/eval/decode.c", ["        .vval = { .v_list = list },", "      }));", "      const int elw_ret = encode_list_write((void *)list, s, len);"], "whitespace/indent"]
["src/nvim/eval/decode.c", ["                          ((typval_T){", "        .v_type = VAR_LIST,", "        .v_lock = VAR_UNLOCKED,"], "whitespace/indent"]
["src/nvim/eval/decode.c", ["        .v_type = VAR_LIST,", "        .v_lock = VAR_UNLOCKED,", "        .vval = { .v_list = list },"], "whitespace/indent"]
["src/nvim/eval/decode.c", ["        .v_lock = VAR_UNLOCKED,", "        .vval = { .v_list = list },", "      }));"], "whitespace/indent"]
["src/nvim/eval/decode.c", ["        .vval = { .v_list = list },", "      }));", "      const int elw_ret = encode_list_write((void *)list, s, len);"], "whitespace/indent"]
["src/nvim/eval/decode.c", ["    } else {", "      uint8_t p_byte = (uint8_t)*p;", "      // unescaped = %x20-21 / %x23-5B / %x5D-10FFFF"], "whitespace/operators"]
["src/nvim/eval/decode.c", ["        };", "        *str_end++ = escapes[(int)*t];", "        break;"], "whitespace/operators"]
["src/nvim/eval/decode.c", ["          .special_val = NULL,", "        }));", "      kv_push(stack, OBJ(tv, false, didcomma, didcolon));"], "whitespace/indent"]
["src/nvim/eval/decode.c", ["          .special_val = val_list,", "        }));", "      kv_push(stack, OBJ(tv, false, didcomma, didcolon));"], "whitespace/indent"]
["src/nvim/eval/decode.c", ["        .vval = { .v_list = list },", "      }));", "    if (encode_list_write((void *)ext_val_list, mobj.via.ext.ptr,"], "whitespace/indent"]

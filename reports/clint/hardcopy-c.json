["src/nvim/hardcopy.c", ["", "/*", " * hardcopy.c: printing to paper"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * To implement printing on a platform, the following functions must be"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  =", "  {", "  { \"top\",     TRUE, 0, NULL, 0, FALSE },"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {", "  { \"top\",     TRUE, 0, NULL, 0, FALSE },", "  { \"bottom\",  TRUE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"top\",     TRUE, 0, NULL, 0, FALSE },", "  { \"bottom\",  TRUE, 0, NULL, 0, FALSE },", "  { \"left\",    TRUE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"bottom\",  TRUE, 0, NULL, 0, FALSE },", "  { \"left\",    TRUE, 0, NULL, 0, FALSE },", "  { \"right\",   TRUE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"left\",    TRUE, 0, NULL, 0, FALSE },", "  { \"right\",   TRUE, 0, NULL, 0, FALSE },", "  { \"header\",  TRUE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"right\",   TRUE, 0, NULL, 0, FALSE },", "  { \"header\",  TRUE, 0, NULL, 0, FALSE },", "  { \"syntax\",  FALSE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"header\",  TRUE, 0, NULL, 0, FALSE },", "  { \"syntax\",  FALSE, 0, NULL, 0, FALSE },", "  { \"number\",  FALSE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"syntax\",  FALSE, 0, NULL, 0, FALSE },", "  { \"number\",  FALSE, 0, NULL, 0, FALSE },", "  { \"wrap\",    FALSE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"number\",  FALSE, 0, NULL, 0, FALSE },", "  { \"wrap\",    FALSE, 0, NULL, 0, FALSE },", "  { \"duplex\",  FALSE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"wrap\",    FALSE, 0, NULL, 0, FALSE },", "  { \"duplex\",  FALSE, 0, NULL, 0, FALSE },", "  { \"portrait\", FALSE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"duplex\",  FALSE, 0, NULL, 0, FALSE },", "  { \"portrait\", FALSE, 0, NULL, 0, FALSE },", "  { \"paper\",   FALSE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"portrait\", FALSE, 0, NULL, 0, FALSE },", "  { \"paper\",   FALSE, 0, NULL, 0, FALSE },", "  { \"collate\", FALSE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"paper\",   FALSE, 0, NULL, 0, FALSE },", "  { \"collate\", FALSE, 0, NULL, 0, FALSE },", "  { \"jobsplit\", FALSE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"collate\", FALSE, 0, NULL, 0, FALSE },", "  { \"jobsplit\", FALSE, 0, NULL, 0, FALSE },", "  { \"formfeed\", FALSE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"jobsplit\", FALSE, 0, NULL, 0, FALSE },", "  { \"formfeed\", FALSE, 0, NULL, 0, FALSE },", "  }"], "readability/bool"]
["src/nvim/hardcopy.c", ["{", "  { \"c\",       FALSE, 0, NULL, 0, FALSE },", "  { \"a\",       FALSE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"c\",       FALSE, 0, NULL, 0, FALSE },", "  { \"a\",       FALSE, 0, NULL, 0, FALSE },", "  { \"r\",       FALSE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"a\",       FALSE, 0, NULL, 0, FALSE },", "  { \"r\",       FALSE, 0, NULL, 0, FALSE },", "  { \"b\",       FALSE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"r\",       FALSE, 0, NULL, 0, FALSE },", "  { \"b\",       FALSE, 0, NULL, 0, FALSE },", "  { \"i\",       FALSE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"b\",       FALSE, 0, NULL, 0, FALSE },", "  { \"i\",       FALSE, 0, NULL, 0, FALSE },", "  { \"o\",       FALSE, 0, NULL, 0, FALSE },"], "readability/bool"]
["src/nvim/hardcopy.c", ["  { \"i\",       FALSE, 0, NULL, 0, FALSE },", "  { \"o\",       FALSE, 0, NULL, 0, FALSE },", "};"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "/*", " * These values determine the print position on a page."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/* Structures to map user named encoding and mapping to PS equivalents for", " * building CID font name */"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/* Static buffer to read initial comments in a resource file, some can have a", " * couple of KB of comments! */"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Parse 'printoptions' and set the flags in \"printer_opts\"."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Parse 'printoptions' and set the flags in \"printer_opts\"."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Parse a list of options in the form"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Repeat for all comma separated parts."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "    for (idx = 0; idx < table_size; ++idx) {", "      if (STRNICMP(stringp, table[idx].name, len) == 0) {"], "readability/increment"]
["src/nvim/hardcopy.c", ["    p = colonp + 1;", "    table[idx].present = TRUE;", ""], "readability/bool"]
["src/nvim/hardcopy.c", ["    if (*stringp == ',') {", "      ++stringp;", "    }"], "readability/increment"]
["src/nvim/hardcopy.c", ["", "/*", " * If using a dark background, the colors will probably be too bright to show"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Get the currently effective header height."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Return TRUE if using a line number for printing."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Return the unit used in a margin item in 'printoptions'."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  if (printer_opts[idx].present) {", "    for (i = 0; i < 4; ++i) {", "      if (STRNICMP(printer_opts[idx].string, units[i], 2) == 0) {"], "readability/increment"]
["src/nvim/hardcopy.c", ["    linenr_T tmp_lnum, tmp_topline, tmp_botline;", "    int use_sandbox = FALSE;", ""], "readability/bool"]
["src/nvim/hardcopy.c", ["", "    /*", "     * Need to (temporarily) set current line number and first/last line"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Display a print status message."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  memset(&settings, 0, sizeof(prt_settings_T));", "  settings.has_color = TRUE;", ""], "readability/bool"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Initialise for printing.  Ask the user for settings, unless forceit is"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  if (!syntax_present(curwin)) {", "    settings.do_syntax = FALSE;", "  } else if (printer_opts[OPT_PRINT_SYNTAX].present"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Estimate the total lines to be printed"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Loop over collated copies: 1 2 3, 1 2 3, ..."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "    /*", "     * Loop over all pages in the print job: 1 2 3 ..."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["     */", "    for (page_count = 0; prtpos.file_line <= eap->line2; ++page_count) {", "      /*"], "readability/increment"]
["src/nvim/hardcopy.c", ["    for (page_count = 0; prtpos.file_line <= eap->line2; ++page_count) {", "      /*", "       * Loop over uncollated copies: 1 1 1, 2 2 2, 3 3 3, ..."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "        /*", "         * Do front and rear side of a page."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["         */", "        for (side = 0; side <= settings.duplex; ++side) {", "          /*"], "readability/increment"]
["src/nvim/hardcopy.c", ["        for (side = 0; side <= settings.duplex; ++side) {", "          /*", "           * Print one page."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["          assert(prtpos.bytes_printed <= SIZE_MAX / 100);", "          sprintf((char *)IObuff, _(\"Printing page %d (%zu%%)\"),", "                  page_count + 1 + side,"], "runtime/printf"]
["src/nvim/hardcopy.c", ["          if (settings.n_collated_copies > 1) {", "            sprintf((char *)IObuff + STRLEN(IObuff),", "                    _(\" Copy %d of %d\"),"], "runtime/printf"]
["src/nvim/hardcopy.c", ["", "          /*", "           * Output header if required"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["          for (page_line = 0; page_line < settings.lines_per_page;", "               ++page_line) {", "            prtpos.column = hardcopy_line(&settings,"], "readability/increment"]
["src/nvim/hardcopy.c", ["", "        /*", "         * Extra blank page for duplexing with odd number of pages and"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["      if (settings.duplex && prtpos.file_line <= eap->line2) {", "        ++page_count;", "      }"], "readability/increment"]
["src/nvim/hardcopy.c", ["  if (got_int || settings.user_abort) {", "    sprintf((char *)IObuff, \"%s\", _(\"Printing aborted\"));", "    prt_message(IObuff);"], "runtime/printf"]
["src/nvim/hardcopy.c", ["", "/*", " * Print one page line."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  char_u *line;", "  int need_break = FALSE;", "  int outputlen;"], "readability/bool"]
["src/nvim/hardcopy.c", ["    }", "    ppos->ff = FALSE;", "  } else {"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Loop over the columns until the end of the file line or right margin."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["    if (psettings->do_syntax) {", "      id = syn_get_id(curwin, ppos->file_line, col, 1, NULL, FALSE);", "      if (id > 0) {"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "    /*", "     * Appropriately expand any tabs to spaces."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["               == 'y') {", "      ppos->ff = TRUE;", "      need_break = 1;"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Start next line of file if we clip lines, or have reached end of the"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * PS printer stuff."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/* The PS prolog file version number has to match - if the prolog file is", " * updated, increment the number in the file and here.  Version checking was"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/* Data for table based DSC comment recognition, easy to extend if VIM needs to", " * read more comments. */"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Variables for the output PostScript file."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Various offsets and dimensions in default PostScript user space (points)."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Various control variables used to decide when and how to change the"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Variables controlling physical printing."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Buffers used when generating PostScript output"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Write a string."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Write an int and a space."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Write a boolean and a space."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Write PostScript to re-encode and define the font."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Write a line to define the CID font."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Write a line to define a duplicate of a CID font"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Convert a real value into an integer and fractional part as integers, with"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Write a real and a space.  Save bytes if real value has no fractional part!"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Write a line to define a numeric variable."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/* prt_next_dsc() - returns detail on next DSC comment line found.  Returns true", " * if a DSC comment is found, else false */"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["    convert_setup(&prt_conv, NULL, NULL);", "    prt_do_conv = FALSE;", "  }"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "/*", " * Calculate margins for given width and height from printoptions settings."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Get number of lines of text that fit on a page (excluding the header)."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Calculate offset to lower left corner of background rect based on actual"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["      *pp_mbenc = p_mbenc;", "      return TRUE;", "    }"], "readability/bool"]
["src/nvim/hardcopy.c", ["  }", "  return FALSE;", "}"], "readability/bool"]
["src/nvim/hardcopy.c", ["      *pp_mbchar = p_mbchar;", "      return TRUE;", "    }"], "readability/bool"]
["src/nvim/hardcopy.c", ["  }", "  return FALSE;", "}"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Set up font and encoding."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["    prt_use_courier = (", "                       mbfont_opts[OPT_MBFONT_USECOURIER].present", "                       && (TOLOWER_ASC(mbfont_opts[OPT_MBFONT_USECOURIER].string[0]) == 'y'));"], "whitespace/indent"]
["src/nvim/hardcopy.c", ["                       mbfont_opts[OPT_MBFONT_USECOURIER].present", "                       && (TOLOWER_ASC(mbfont_opts[OPT_MBFONT_USECOURIER].string[0]) == 'y'));", "    if (prt_use_courier) {"], "whitespace/indent"]
["src/nvim/hardcopy.c", ["  } else {", "    prt_use_courier = FALSE;", "    prt_ps_font = &prt_ps_courier_font;"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Find the size of the paper and set the margins."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  }", "  for (i = 0; i < (int)PRT_MEDIASIZE_LEN; ++i) {", "    if (STRLEN(prt_mediasize[i].name) == (unsigned)paper_strlen"], "readability/increment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Set PS pagesize based on media dimensions and print orientation."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Set up the font size."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Return the number of characters per line, and lines per page for the"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Sort out the number of copies to be printed.  PS by default will do"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Set up printer duplex and tumble based on Duplex option setting - default"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["   */", "  prt_duplex = TRUE;", "  prt_tumble = FALSE;"], "readability/bool"]
["src/nvim/hardcopy.c", ["  prt_duplex = TRUE;", "  prt_tumble = FALSE;", "  psettings->duplex = 1;"], "readability/bool"]
["src/nvim/hardcopy.c", ["    if (STRNICMP(printer_opts[OPT_PRINT_DUPLEX].string, \"off\", 3) == 0) {", "      prt_duplex = FALSE;", "      psettings->duplex = 0;"], "readability/bool"]
["src/nvim/hardcopy.c", ["               == 0) {", "      prt_tumble = TRUE;", "    }"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "  /*", "   * PS DSC Header comments - no PS code!"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["    prt_dsc_font_resource((prt_use_courier ? NULL", "                                           : \"DocumentNeededResources\"), &prt_ps_mb_font);", "    if (!prt_custom_cmap) {"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * PS Document page defaults"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * PS Document prolog inclusion - all required procsets."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * PS Document setup - must appear after the prolog"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Output any info we don't know in toto until we finish"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["{", "  return mch_print_begin_page(NULL) ? (mch_print_end_page()) : FALSE;", "}"], "readability/bool"]
["src/nvim/hardcopy.c", ["      case BS:", "        ga_append(&prt_ps_buffer, 'b'); break;", "      case TAB:"], "whitespace/newline"]
["src/nvim/hardcopy.c", ["      case TAB:", "        ga_append(&prt_ps_buffer, 't'); break;", "      case NL:"], "whitespace/newline"]
["src/nvim/hardcopy.c", ["      case NL:", "        ga_append(&prt_ps_buffer, 'n'); break;", "      case FF:"], "whitespace/newline"]
["src/nvim/hardcopy.c", ["      case FF:", "        ga_append(&prt_ps_buffer, 'f'); break;", "      case CAR:"], "whitespace/newline"]
["src/nvim/hardcopy.c", ["      case CAR:", "        ga_append(&prt_ps_buffer, 'r'); break;", "      case '(':"], "whitespace/newline"]
["src/nvim/hardcopy.c", ["      case '(':", "        ga_append(&prt_ps_buffer, '('); break;", "      case ')':"], "whitespace/newline"]
["src/nvim/hardcopy.c", ["      case ')':", "        ga_append(&prt_ps_buffer, ')'); break;", "      case '\\\\':"], "whitespace/newline"]
["src/nvim/hardcopy.c", ["      case '\\\\':", "        ga_append(&prt_ps_buffer, '\\\\'); break;", ""], "whitespace/newline"]
["src/nvim/hardcopy.c", ["      default:", "        sprintf((char *)ch_buff, \"%03o\", (unsigned int)ch);", "        ga_append(&prt_ps_buffer, (char)ch_buff[0]);"], "runtime/printf"]
